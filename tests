#lang racket
(define l (list "1-2" "S2" "S3" "1-4" "1-5" "S6" "S7" "1-8"))
(define (mp list)
  (for-each (lambda (item) (memf item list)'none)) list)

;(map (lambda (item) (if (equal? (substring item 0 1)"S")'none (take-right l (index-of l item))))l)



(define (devide list indexes)
  (define reslist '())
  (do ((i 1 (+ i 1)))((= i (length indexes)))
  (cons (slice l (car indexes) (+(-(cadr indexes)(car indexes))1))reslist))reslist) 
      
  

(define i(indexes-where l (lambda (item)(not (equal? (substring  item 0 1)"S")))))

(define (slice l offset n)
  (take (drop l offset) n))

(devide l i)

